//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace ThousandAcreWoods.AudioBook.VoiceChanger.Clients
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOkadaVoiceChangerClient
    {
        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Hello_api_hello_getAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Hello_api_hello_getAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Hello_api_hello_get2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Hello_api_hello_get2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_postAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_postAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__getAsync(int index, bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__getAsync(int index, bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__putAsync(int index);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__putAsync(int index, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__deleteAsync(int index);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__deleteAsync(int index, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_postAsync(RVCModelImportParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_postAsync(RVCModelImportParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_postAsync(BeatriceV2ModelImportParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_postAsync(BeatriceV2ModelImportParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_postAsync(MergeParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_postAsync(MergeParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_postAsync(OnnxExportParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_postAsync(OnnxExportParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_postAsync(MoveModelParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_postAsync(MoveModelParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_postAsync(MoveMergedModelParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_postAsync(MoveMergedModelParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_postAsync(MoveExportedOnnxModelParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_postAsync(MoveExportedOnnxModelParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_postAsync(SetIconParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_postAsync(SetIconParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_post2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_post2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__get2Async(int index, bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__get2Async(int index, bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__put2Async(int index);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__put2Async(int index, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__delete2Async(int index);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__delete2Async(int index, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_post2Async(RVCModelImportParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_post2Async(RVCModelImportParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_post2Async(BeatriceV2ModelImportParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_post2Async(BeatriceV2ModelImportParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_post2Async(MergeParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_post2Async(MergeParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_post2Async(OnnxExportParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_post2Async(OnnxExportParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_post2Async(MoveModelParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_post2Async(MoveModelParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_post2Async(MoveMergedModelParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_post2Async(MoveMergedModelParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_post2Async(MoveExportedOnnxModelParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_post2Async(MoveExportedOnnxModelParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_post2Async(SetIconParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_post2Async(SetIconParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Put_configuration_api_configuration_manager_configuration_putAsync(VoiceChangerConfiguration body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Put_configuration_api_configuration_manager_configuration_putAsync(VoiceChangerConfiguration body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Put_configuration_api_configuration_manager_configuration_put2Async(VoiceChangerConfiguration body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Put_configuration_api_configuration_manager_configuration_put2Async(VoiceChangerConfiguration body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_getAsync(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_postAsync(SampleDownloadParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_postAsync(SampleDownloadParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_get2Async(bool? reload);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_post2Async(SampleDownloadParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_post2Async(SampleDownloadParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_info_api_uploader_info_getAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_info_api_uploader_info_getAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_postAsync(FileParameter file, string filename, int? index);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_postAsync(FileParameter file, string filename, int? index, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_postAsync(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_postAsync(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_info_api_uploader_info_get2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Get_info_api_uploader_info_get2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_post2Async(FileParameter file, string filename, int? index);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_post2Async(FileParameter file, string filename, int? index, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post2Async(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post2Async(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_postAsync(XTimestamp x_timestamp, FileParameter waveform);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_postAsync(XTimestamp x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_postAsync(XTimestamp2 x_timestamp, FileParameter waveform);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_postAsync(XTimestamp2 x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_postAsync(ConvertFileParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_postAsync(ConvertFileParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_postAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_postAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_postAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_postAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_getAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_getAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_post2Async(XTimestamp3 x_timestamp, FileParameter waveform);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_post2Async(XTimestamp3 x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_post2Async(XTimestamp4 x_timestamp, FileParameter waveform);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_post2Async(XTimestamp4 x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_post2Async(ConvertFileParam body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_post2Async(ConvertFileParam body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_post2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_post2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_post2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_post2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_get2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_get2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_postAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_postAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_post2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_post2Async(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OkadaVoiceChangerClient : IOkadaVoiceChangerClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public OkadaVoiceChangerClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Hello_api_hello_getAsync()
        {
            return Hello_api_hello_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Hello_api_hello_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/hello"
                    urlBuilder_.Append("api/hello");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Hello_api_hello_get2Async()
        {
            return Hello_api_hello_get2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hello
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Hello_api_hello_get2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_hello"
                    urlBuilder_.Append("api_hello");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_getAsync(bool? reload)
        {
            return Get_slots_api_slot_manager_slots_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots"
                    urlBuilder_.Append("api/slot-manager/slots");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_postAsync()
        {
            return Post_slot_api_slot_manager_slots_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots"
                    urlBuilder_.Append("api/slot-manager/slots");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__getAsync(int index, bool? reload)
        {
            return Get_slot_api_slot_manager_slots__index__getAsync(index, reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__getAsync(int index, bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/{index}"
                    urlBuilder_.Append("api/slot-manager/slots/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__putAsync(int index)
        {
            return Put_slot_info_api_slot_manager_slots__index__putAsync(index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__putAsync(int index, System.Threading.CancellationToken cancellationToken)
        {
            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/{index}"
                    urlBuilder_.Append("api/slot-manager/slots/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__deleteAsync(int index)
        {
            return Delete_slot_info_api_slot_manager_slots__index__deleteAsync(index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__deleteAsync(int index, System.Threading.CancellationToken cancellationToken)
        {
            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/{index}"
                    urlBuilder_.Append("api/slot-manager/slots/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_postAsync(RVCModelImportParam body)
        {
            return Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_postAsync(RVCModelImportParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/dummy/rvc"
                    urlBuilder_.Append("api/slot-manager/slots/dummy/rvc");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_postAsync(BeatriceV2ModelImportParam body)
        {
            return Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_postAsync(BeatriceV2ModelImportParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/dummy/beatricev2"
                    urlBuilder_.Append("api/slot-manager/slots/dummy/beatricev2");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_postAsync(MergeParam body)
        {
            return Post_merge_models_api_slot_manager_slots_operation_merge_models_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_postAsync(MergeParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/operation/merge_models"
                    urlBuilder_.Append("api/slot-manager/slots/operation/merge_models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_postAsync(OnnxExportParam body)
        {
            return Post_export_onnx_api_slot_manager_slots_operation_export_onnx_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_postAsync(OnnxExportParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/operation/export_onnx"
                    urlBuilder_.Append("api/slot-manager/slots/operation/export_onnx");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_postAsync(MoveModelParam body)
        {
            return Post_move_model_api_slot_manager_slots_operation_move_model_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_postAsync(MoveModelParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/operation/move_model"
                    urlBuilder_.Append("api/slot-manager/slots/operation/move_model");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_postAsync(MoveMergedModelParam body)
        {
            return Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_postAsync(MoveMergedModelParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/operation/move_merged_model"
                    urlBuilder_.Append("api/slot-manager/slots/operation/move_merged_model");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_postAsync(MoveExportedOnnxModelParam body)
        {
            return Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_postAsync(MoveExportedOnnxModelParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/operation/move_exported_onnx_model"
                    urlBuilder_.Append("api/slot-manager/slots/operation/move_exported_onnx_model");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_postAsync(SetIconParam body)
        {
            return Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_postAsync(SetIconParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/slot-manager/slots/operation/set_icon_file"
                    urlBuilder_.Append("api/slot-manager/slots/operation/set_icon_file");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_get2Async(bool? reload)
        {
            return Get_slots_api_slot_manager_slots_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slots
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_slots_api_slot_manager_slots_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots"
                    urlBuilder_.Append("api_slot-manager_slots");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_post2Async()
        {
            return Post_slot_api_slot_manager_slots_post2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_slot_api_slot_manager_slots_post2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots"
                    urlBuilder_.Append("api_slot-manager_slots");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__get2Async(int index, bool? reload)
        {
            return Get_slot_api_slot_manager_slots__index__get2Async(index, reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Slot
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_slot_api_slot_manager_slots__index__get2Async(int index, bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_{index}"
                    urlBuilder_.Append("api_slot-manager_slots_");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__put2Async(int index)
        {
            return Put_slot_info_api_slot_manager_slots__index__put2Async(index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Put_slot_info_api_slot_manager_slots__index__put2Async(int index, System.Threading.CancellationToken cancellationToken)
        {
            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_{index}"
                    urlBuilder_.Append("api_slot-manager_slots_");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__delete2Async(int index)
        {
            return Delete_slot_info_api_slot_manager_slots__index__delete2Async(index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Slot Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Delete_slot_info_api_slot_manager_slots__index__delete2Async(int index, System.Threading.CancellationToken cancellationToken)
        {
            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_{index}"
                    urlBuilder_.Append("api_slot-manager_slots_");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_post2Async(RVCModelImportParam body)
        {
            return Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Rvc
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_slot_dummy_rvc_api_slot_manager_slots_dummy_rvc_post2Async(RVCModelImportParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_dummy_rvc"
                    urlBuilder_.Append("api_slot-manager_slots_dummy_rvc");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_post2Async(BeatriceV2ModelImportParam body)
        {
            return Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Slot Dummy Beatricev2
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_slot_dummy_beatricev2_api_slot_manager_slots_dummy_beatricev2_post2Async(BeatriceV2ModelImportParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_dummy_beatricev2"
                    urlBuilder_.Append("api_slot-manager_slots_dummy_beatricev2");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_post2Async(MergeParam body)
        {
            return Post_merge_models_api_slot_manager_slots_operation_merge_models_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Merge Models
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_merge_models_api_slot_manager_slots_operation_merge_models_post2Async(MergeParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_operation_merge_models"
                    urlBuilder_.Append("api_slot-manager_slots_operation_merge_models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_post2Async(OnnxExportParam body)
        {
            return Post_export_onnx_api_slot_manager_slots_operation_export_onnx_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Export Onnx
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_export_onnx_api_slot_manager_slots_operation_export_onnx_post2Async(OnnxExportParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_operation_export_onnx"
                    urlBuilder_.Append("api_slot-manager_slots_operation_export_onnx");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_post2Async(MoveModelParam body)
        {
            return Post_move_model_api_slot_manager_slots_operation_move_model_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_move_model_api_slot_manager_slots_operation_move_model_post2Async(MoveModelParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_operation_move_model"
                    urlBuilder_.Append("api_slot-manager_slots_operation_move_model");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_post2Async(MoveMergedModelParam body)
        {
            return Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Merged Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_move_merged_model_api_slot_manager_slots_operation_move_merged_model_post2Async(MoveMergedModelParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_operation_move_merged_model"
                    urlBuilder_.Append("api_slot-manager_slots_operation_move_merged_model");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_post2Async(MoveExportedOnnxModelParam body)
        {
            return Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Move Export Onnx Model
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_move_export_onnx_model_api_slot_manager_slots_operation_move_exported_onnx_model_post2Async(MoveExportedOnnxModelParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_operation_move_exported_onnx_model"
                    urlBuilder_.Append("api_slot-manager_slots_operation_move_exported_onnx_model");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_post2Async(SetIconParam body)
        {
            return Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Set Icon File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_set_icon_file_api_slot_manager_slots_operation_set_icon_file_post2Async(SetIconParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_slot-manager_slots_operation_set_icon_file"
                    urlBuilder_.Append("api_slot-manager_slots_operation_set_icon_file");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_getAsync(bool? reload)
        {
            return Get_configuration_api_configuration_manager_configuration_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/configuration-manager/configuration"
                    urlBuilder_.Append("api/configuration-manager/configuration");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Put_configuration_api_configuration_manager_configuration_putAsync(VoiceChangerConfiguration body)
        {
            return Put_configuration_api_configuration_manager_configuration_putAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Put_configuration_api_configuration_manager_configuration_putAsync(VoiceChangerConfiguration body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/configuration-manager/configuration"
                    urlBuilder_.Append("api/configuration-manager/configuration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_get2Async(bool? reload)
        {
            return Get_configuration_api_configuration_manager_configuration_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_configuration_api_configuration_manager_configuration_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_configuration-manager_configuration"
                    urlBuilder_.Append("api_configuration-manager_configuration");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Put_configuration_api_configuration_manager_configuration_put2Async(VoiceChangerConfiguration body)
        {
            return Put_configuration_api_configuration_manager_configuration_put2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Put Configuration
        /// </summary>
        /// <remarks>
        /// 注意: VoiceChangerConfigurationには初期値が設定されているので、フィールドが欠けていても初期値で補われてエラーが出ない。
        /// <br/>　　　フィールドの型が異なる場合はエラーが出る。
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Put_configuration_api_configuration_manager_configuration_put2Async(VoiceChangerConfiguration body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_configuration-manager_configuration"
                    urlBuilder_.Append("api_configuration-manager_configuration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_getAsync(bool? reload)
        {
            return Get_input_devices_api_audio_device_manager_input_devices_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/audio-device-manager/input_devices"
                    urlBuilder_.Append("api/audio-device-manager/input_devices");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_getAsync(bool? reload)
        {
            return Get_output_devices_api_audio_device_manager_output_devices_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/audio-device-manager/output_devices"
                    urlBuilder_.Append("api/audio-device-manager/output_devices");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_get2Async(bool? reload)
        {
            return Get_input_devices_api_audio_device_manager_input_devices_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Input Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_input_devices_api_audio_device_manager_input_devices_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_audio-device-manager_input_devices"
                    urlBuilder_.Append("api_audio-device-manager_input_devices");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_get2Async(bool? reload)
        {
            return Get_output_devices_api_audio_device_manager_output_devices_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Output Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_output_devices_api_audio_device_manager_output_devices_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_audio-device-manager_output_devices"
                    urlBuilder_.Append("api_audio-device-manager_output_devices");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_getAsync(bool? reload)
        {
            return Get_devices_api_gpu_device_manager_devices_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/gpu-device-manager/devices"
                    urlBuilder_.Append("api/gpu-device-manager/devices");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_get2Async(bool? reload)
        {
            return Get_devices_api_gpu_device_manager_devices_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Devices
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_devices_api_gpu_device_manager_devices_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_gpu-device-manager_devices"
                    urlBuilder_.Append("api_gpu-device-manager_devices");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_getAsync(bool? reload)
        {
            return Get_modules_api_module_manager_modules_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/module-manager/modules"
                    urlBuilder_.Append("api/module-manager/modules");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_get2Async(bool? reload)
        {
            return Get_modules_api_module_manager_modules_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Modules
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_modules_api_module_manager_modules_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_module-manager_modules"
                    urlBuilder_.Append("api_module-manager_modules");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_getAsync(bool? reload)
        {
            return Get_samples_api_sample_manager_samples_getAsync(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_getAsync(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/sample-manager/samples"
                    urlBuilder_.Append("api/sample-manager/samples");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_postAsync(SampleDownloadParam body)
        {
            return Post_download_api_sample_manager_samples_operation_download_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_postAsync(SampleDownloadParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/sample-manager/samples/operation/download"
                    urlBuilder_.Append("api/sample-manager/samples/operation/download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_get2Async(bool? reload)
        {
            return Get_samples_api_sample_manager_samples_get2Async(reload, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Samples
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_samples_api_sample_manager_samples_get2Async(bool? reload, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_sample-manager_samples"
                    urlBuilder_.Append("api_sample-manager_samples");
                    urlBuilder_.Append('?');
                    if (reload != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reload")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reload, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_post2Async(SampleDownloadParam body)
        {
            return Post_download_api_sample_manager_samples_operation_download_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Download
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_download_api_sample_manager_samples_operation_download_post2Async(SampleDownloadParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_sample-manager_samples_operation_download"
                    urlBuilder_.Append("api_sample-manager_samples_operation_download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_info_api_uploader_info_getAsync()
        {
            return Get_info_api_uploader_info_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_info_api_uploader_info_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/uploader/info"
                    urlBuilder_.Append("api/uploader/info");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_postAsync(FileParameter file, string filename, int? index)
        {
            return Post_upload_file_chunk_api_uploader_upload_file_chunk_postAsync(file, filename, index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_postAsync(FileParameter file, string filename, int? index, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (index == null)
                        throw new System.ArgumentNullException("index");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)), "index");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/uploader/upload_file_chunk"
                    urlBuilder_.Append("api/uploader/upload_file_chunk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_postAsync(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body)
        {
            return Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_postAsync(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/uploader/concat_uploaded_file_chunk"
                    urlBuilder_.Append("api/uploader/concat_uploaded_file_chunk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Get_info_api_uploader_info_get2Async()
        {
            return Get_info_api_uploader_info_get2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Info
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Get_info_api_uploader_info_get2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_uploader_info"
                    urlBuilder_.Append("api_uploader_info");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_post2Async(FileParameter file, string filename, int? index)
        {
            return Post_upload_file_chunk_api_uploader_upload_file_chunk_post2Async(file, filename, index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Upload File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_upload_file_chunk_api_uploader_upload_file_chunk_post2Async(FileParameter file, string filename, int? index, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (index == null)
                        throw new System.ArgumentNullException("index");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)), "index");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_uploader_upload_file_chunk"
                    urlBuilder_.Append("api_uploader_upload_file_chunk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post2Async(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body)
        {
            return Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Concat Uploaded File Chunk
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post2Async(Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_uploader_concat_uploaded_file_chunk"
                    urlBuilder_.Append("api_uploader_concat_uploaded_file_chunk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_postAsync(XTimestamp x_timestamp, FileParameter waveform)
        {
            return Post_convert_chunk_api_voice_changer_convert_chunk_postAsync(x_timestamp, waveform, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_postAsync(XTimestamp x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_timestamp != null)
                        request_.Headers.TryAddWithoutValidation("x-timestamp", ConvertToString(x_timestamp, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (waveform == null)
                        throw new System.ArgumentNullException("waveform");
                    else
                    {
                        var content_waveform_ = new System.Net.Http.StreamContent(waveform.Data);
                        if (!string.IsNullOrEmpty(waveform.ContentType))
                            content_waveform_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(waveform.ContentType);
                        content_.Add(content_waveform_, "waveform", waveform.FileName ?? "waveform");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/voice-changer/convert_chunk"
                    urlBuilder_.Append("api/voice-changer/convert_chunk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_postAsync(XTimestamp2 x_timestamp, FileParameter waveform)
        {
            return Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_postAsync(x_timestamp, waveform, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_postAsync(XTimestamp2 x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_timestamp != null)
                        request_.Headers.TryAddWithoutValidation("x-timestamp", ConvertToString(x_timestamp, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (waveform == null)
                        throw new System.ArgumentNullException("waveform");
                    else
                    {
                        var content_waveform_ = new System.Net.Http.StreamContent(waveform.Data);
                        if (!string.IsNullOrEmpty(waveform.ContentType))
                            content_waveform_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(waveform.ContentType);
                        content_.Add(content_waveform_, "waveform", waveform.FileName ?? "waveform");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/voice-changer/convert_chunk_bulk"
                    urlBuilder_.Append("api/voice-changer/convert_chunk_bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_postAsync(ConvertFileParam body)
        {
            return Post_convert_file_api_voice_changer_convert_file_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_postAsync(ConvertFileParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/voice-changer/convert_file"
                    urlBuilder_.Append("api/voice-changer/convert_file");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_postAsync()
        {
            return Start_server_device_api_voice_changer_operation_start_server_device_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/voice-changer/operation/start_server_device"
                    urlBuilder_.Append("api/voice-changer/operation/start_server_device");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_postAsync()
        {
            return Stop_server_device_api_voice_changer_operation_stop_server_device_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/voice-changer/operation/stop_server_device"
                    urlBuilder_.Append("api/voice-changer/operation/stop_server_device");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_getAsync()
        {
            return Get_voice_changer_information_api_voice_changer_manager_information_getAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_getAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/voice-changer-manager/information"
                    urlBuilder_.Append("api/voice-changer-manager/information");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoiceChangerManagerInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_post2Async(XTimestamp3 x_timestamp, FileParameter waveform)
        {
            return Post_convert_chunk_api_voice_changer_convert_chunk_post2Async(x_timestamp, waveform, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ np.float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_convert_chunk_api_voice_changer_convert_chunk_post2Async(XTimestamp3 x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_timestamp != null)
                        request_.Headers.TryAddWithoutValidation("x-timestamp", ConvertToString(x_timestamp, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (waveform == null)
                        throw new System.ArgumentNullException("waveform");
                    else
                    {
                        var content_waveform_ = new System.Net.Http.StreamContent(waveform.Data);
                        if (!string.IsNullOrEmpty(waveform.ContentType))
                            content_waveform_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(waveform.ContentType);
                        content_.Add(content_waveform_, "waveform", waveform.FileName ?? "waveform");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_voice-changer_convert_chunk"
                    urlBuilder_.Append("api_voice-changer_convert_chunk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_post2Async(XTimestamp4 x_timestamp, FileParameter waveform)
        {
            return Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_post2Async(x_timestamp, waveform, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert Chunk Bulk
        /// </summary>
        /// <remarks>
        /// 音声変換を行うAPI
        /// <br/>
        /// <br/>Args:
        /// <br/>    waveform (UploadFile): 音声データ float32のバイナリデータを想定している。
        /// <br/>    x_timestamp (int): タイムスタンプ
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_post2Async(XTimestamp4 x_timestamp, FileParameter waveform, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_timestamp != null)
                        request_.Headers.TryAddWithoutValidation("x-timestamp", ConvertToString(x_timestamp, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (waveform == null)
                        throw new System.ArgumentNullException("waveform");
                    else
                    {
                        var content_waveform_ = new System.Net.Http.StreamContent(waveform.Data);
                        if (!string.IsNullOrEmpty(waveform.ContentType))
                            content_waveform_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(waveform.ContentType);
                        content_.Add(content_waveform_, "waveform", waveform.FileName ?? "waveform");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_voice-changer_convert_chunk_bulk"
                    urlBuilder_.Append("api_voice-changer_convert_chunk_bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_post2Async(ConvertFileParam body)
        {
            return Post_convert_file_api_voice_changer_convert_file_post2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post Convert File
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Post_convert_file_api_voice_changer_convert_file_post2Async(ConvertFileParam body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_voice-changer_convert_file"
                    urlBuilder_.Append("api_voice-changer_convert_file");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OkadaVoiceChangerException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_post2Async()
        {
            return Start_server_device_api_voice_changer_operation_start_server_device_post2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Start_server_device_api_voice_changer_operation_start_server_device_post2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_voice-changer_operation_start_server_device"
                    urlBuilder_.Append("api_voice-changer_operation_start_server_device");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_post2Async()
        {
            return Stop_server_device_api_voice_changer_operation_stop_server_device_post2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop Server Device
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Stop_server_device_api_voice_changer_operation_stop_server_device_post2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_voice-changer_operation_stop_server_device"
                    urlBuilder_.Append("api_voice-changer_operation_stop_server_device");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_get2Async()
        {
            return Get_voice_changer_information_api_voice_changer_manager_information_get2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Voice Changer Information
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VoiceChangerManagerInfo> Get_voice_changer_information_api_voice_changer_manager_information_get2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_voice-changer-manager_information"
                    urlBuilder_.Append("api_voice-changer-manager_information");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoiceChangerManagerInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_postAsync()
        {
            return Initialize_api_operation_initialize_postAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_postAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/operation/initialize"
                    urlBuilder_.Append("api/operation/initialize");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_post2Async()
        {
            return Initialize_api_operation_initialize_post2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initialize
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="OkadaVoiceChangerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Initialize_api_operation_initialize_post2Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api_operation_initialize"
                    urlBuilder_.Append("api_operation_initialize");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OkadaVoiceChangerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OkadaVoiceChangerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new OkadaVoiceChangerException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                var cont = await response.Content.ReadAsStringAsync();
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new OkadaVoiceChangerException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BeatriceV2ModelImportParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("voice_changer_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BeatriceV2ModelImportParamVoice_changer_type Voice_changer_type { get; set; } = ThousandAcreWoods.AudioBook.VoiceChanger.Clients.BeatriceV2ModelImportParamVoice_changer_type.Beatrice_v2;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("terms_of_use_url")]
        public string Terms_of_use_url { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public Slot_index Slot_index { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon_file")]
        public Icon_file Icon_file { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zip_file")]
        public Zip_file Zip_file { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body_post_concat_uploaded_file_chunk_api_uploader_concat_uploaded_file_chunk_post
    {

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filename_chunk_num")]
        public int Filename_chunk_num { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body_post_convert_chunk_api_voice_changer_convert_chunk_post
    {

        [System.Text.Json.Serialization.JsonPropertyName("waveform")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Waveform { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body_post_convert_chunk_bulk_api_voice_changer_convert_chunk_bulk_post
    {

        [System.Text.Json.Serialization.JsonPropertyName("waveform")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Waveform { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body_post_upload_file_chunk_api_uploader_upload_file_chunk_post
    {

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] File { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        public int Index { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConvertFileParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("src_path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src_path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dst_path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Dst_path { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmbedderInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("embedder_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EmbedderInfoEmbedder_type Embedder_type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("model_file")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Model_file { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public int Device_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("candidate_onnx_providers")]
        public Candidate_onnx_providers Candidate_onnx_providers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("candidate_onnx_provider_options")]
        public object Candidate_onnx_provider_options { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onnx_providers")]
        public Onnx_providers Onnx_providers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onnx_provider_options")]
        public Onnx_provider_options Onnx_provider_options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HTTPValidationError
    {

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public System.Collections.Generic.ICollection<ValidationError> Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MergeParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("files")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ModelSource> Files { get; set; } = new System.Collections.ObjectModel.Collection<ModelSource>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelSource
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("strength")]
        public double Strength { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveExportedOnnxModelParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("dst")]
        public Dst Dst { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveMergedModelParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("dst")]
        public Dst2 Dst { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveModelParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("src")]
        public int Src { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dst")]
        public int Dst { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnnxExportParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PipelineInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("input_sample_rate")]
        public int Input_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("output_sample_rate")]
        public int Output_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("chunk_sec")]
        public double Chunk_sec { get; set; } = 0.1D;

        [System.Text.Json.Serialization.JsonPropertyName("slot_info")]
        public object Slot_info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchEstimatorInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("pitch_estimator_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PitchEstimatorInfoPitch_estimator_type Pitch_estimator_type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("model_file")]
        public Model_file Model_file { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public int Device_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("candidate_onnx_providers")]
        public Candidate_onnx_providers2 Candidate_onnx_providers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("candidate_onnx_provider_options")]
        public object Candidate_onnx_provider_options { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onnx_providers")]
        public Onnx_providers2 Onnx_providers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onnx_provider_options")]
        public Onnx_provider_options2 Onnx_provider_options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RVCInferencerInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("inferencer_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RVCInferencerInfoInferencer_type Inferencer_type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("model_file")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Model_file { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public int Device_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("candidate_onnx_providers")]
        public Candidate_onnx_providers3 Candidate_onnx_providers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("candidate_onnx_provider_options")]
        public object Candidate_onnx_provider_options { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onnx_providers")]
        public Onnx_providers3 Onnx_providers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onnx_provider_options")]
        public Onnx_provider_options3 Onnx_provider_options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RVCModelImportParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("voice_changer_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RVCModelImportParamVoice_changer_type Voice_changer_type { get; set; } = ThousandAcreWoods.AudioBook.VoiceChanger.Clients.RVCModelImportParamVoice_changer_type.RVC;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("terms_of_use_url")]
        public string Terms_of_use_url { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public Slot_index2 Slot_index { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon_file")]
        public Icon_file2 Icon_file { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("model_file")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Model_file { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("index_file")]
        public Index_file Index_file { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RVCPipelineInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("input_sample_rate")]
        public int Input_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("output_sample_rate")]
        public int Output_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("chunk_sec")]
        public double Chunk_sec { get; set; } = 0.1D;

        [System.Text.Json.Serialization.JsonPropertyName("slot_info")]
        public object Slot_info { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("embedder_info")]
        [System.ComponentModel.DataAnnotations.Required]
        public EmbedderInfo Embedder_info { get; set; } = new EmbedderInfo();

        [System.Text.Json.Serialization.JsonPropertyName("pitch_estimator_info")]
        [System.ComponentModel.DataAnnotations.Required]
        public PitchEstimatorInfo Pitch_estimator_info { get; set; } = new PitchEstimatorInfo();

        [System.Text.Json.Serialization.JsonPropertyName("inferencer_info")]
        [System.ComponentModel.DataAnnotations.Required]
        public RVCInferencerInfo Inferencer_info { get; set; } = new RVCInferencerInfo();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SampleDownloadParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sample_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sample_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetIconParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon_file")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Icon_file { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationError
    {

        [System.Text.Json.Serialization.JsonPropertyName("loc")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Loc> Loc { get; set; } = new System.Collections.ObjectModel.Collection<Loc>();

        [System.Text.Json.Serialization.JsonPropertyName("msg")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoiceChangerConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("current_slot_index")]
        public int Current_slot_index { get; set; } = 0;

        [System.Text.Json.Serialization.JsonPropertyName("voice_changer_input_mode")]
        public string Voice_changer_input_mode { get; set; } = "client";

        [System.Text.Json.Serialization.JsonPropertyName("sio_broadcast")]
        public bool Sio_broadcast { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("pass_through")]
        public bool Pass_through { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("recording_started")]
        public bool Recording_started { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("enable_performance_monitor")]
        public bool Enable_performance_monitor { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("enable_high_pass_filter")]
        public bool Enable_high_pass_filter { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("high_pass_filter_cutoff")]
        public double High_pass_filter_cutoff { get; set; } = 100D;

        [System.Text.Json.Serialization.JsonPropertyName("enable_low_pass_filter")]
        public bool Enable_low_pass_filter { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("low_pass_filter_cutoff")]
        public double Low_pass_filter_cutoff { get; set; } = 10000D;

        [System.Text.Json.Serialization.JsonPropertyName("volume_tuning_type")]
        public string Volume_tuning_type { get; set; } = "sqrt";

        [System.Text.Json.Serialization.JsonPropertyName("audio_input_device_index")]
        public int Audio_input_device_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("audio_output_device_index")]
        public int Audio_output_device_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("audio_monitor_device_index")]
        public int Audio_monitor_device_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("wasapi_exclude_emabled")]
        public bool Wasapi_exclude_emabled { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("audio_input_device_sample_rate")]
        public int Audio_input_device_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("audio_output_device_sample_rate")]
        public int Audio_output_device_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("audio_monitor_device_sample_rate")]
        public int Audio_monitor_device_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("audio_input_device_gain")]
        public double Audio_input_device_gain { get; set; } = 2D;

        [System.Text.Json.Serialization.JsonPropertyName("audio_output_device_gain")]
        public double Audio_output_device_gain { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("audio_monitor_device_gain")]
        public double Audio_monitor_device_gain { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("noise_gate")]
        public double Noise_gate { get; set; } = -100D;

        [System.Text.Json.Serialization.JsonPropertyName("extra_frame_sec")]
        public double Extra_frame_sec { get; set; } = 0.08D;

        [System.Text.Json.Serialization.JsonPropertyName("crossfade_sec")]
        public double Crossfade_sec { get; set; } = 0.05D;

        [System.Text.Json.Serialization.JsonPropertyName("sola_search_frame_sec")]
        public double Sola_search_frame_sec { get; set; } = 0.012D;

        [System.Text.Json.Serialization.JsonPropertyName("gpu_device_id_int")]
        public int Gpu_device_id_int { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("input_sample_rate")]
        public int Input_sample_rate { get; set; } = 48000;

        [System.Text.Json.Serialization.JsonPropertyName("output_sample_rate")]
        public int Output_sample_rate { get; set; } = 48000;

        [System.Text.Json.Serialization.JsonPropertyName("monitor_sample_rate")]
        public int Monitor_sample_rate { get; set; } = 48000;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoiceChangerInformation
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_index")]
        public int Slot_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("pitch_estimator_type")]
        public Pitch_estimator_type Pitch_estimator_type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gpu_device_index")]
        public int Gpu_device_index { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("input_sample_rate")]
        public int Input_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("output_sample_rate")]
        public int Output_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("monitor_sample_rate")]
        public int Monitor_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("vc_input_sample_rate")]
        public int Vc_input_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("vc_output_sample_rate")]
        public int Vc_output_sample_rate { get; set; } = -1;

        [System.Text.Json.Serialization.JsonPropertyName("resample_ratio_in")]
        public double Resample_ratio_in { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("resample_ratio_out")]
        public double Resample_ratio_out { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("resample_ratio_monitor")]
        public double Resample_ratio_monitor { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("resample_ratio_pass_through_in_out")]
        public double Resample_ratio_pass_through_in_out { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("resample_ratio_pass_through_in_monitor")]
        public double Resample_ratio_pass_through_in_monitor { get; set; } = 1D;

        [System.Text.Json.Serialization.JsonPropertyName("enable_high_pass_filter")]
        public bool Enable_high_pass_filter { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("high_pass_filter_cutoff")]
        public double High_pass_filter_cutoff { get; set; } = -1D;

        [System.Text.Json.Serialization.JsonPropertyName("enable_low_pass_filter")]
        public bool Enable_low_pass_filter { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("low_pass_filter_cutoff")]
        public double Low_pass_filter_cutoff { get; set; } = -1D;

        [System.Text.Json.Serialization.JsonPropertyName("chunk_sec")]
        public double Chunk_sec { get; set; } = 0.1D;

        [System.Text.Json.Serialization.JsonPropertyName("pipeline_info")]
        public Pipeline_info Pipeline_info { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("voice_changer_type")]
        public Voice_changer_type Voice_changer_type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bulk_process_start_flag")]
        public bool Bulk_process_start_flag { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("recording_start_flag")]
        public bool Recording_start_flag { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("monitor_enabled")]
        public bool Monitor_enabled { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoiceChangerManagerInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("local_voice_changer_interface_active")]
        public bool Local_voice_changer_interface_active { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("voice_changer_information")]
        [System.ComponentModel.DataAnnotations.Required]
        public VoiceChangerInformation Voice_changer_information { get; set; } = new VoiceChangerInformation();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XTimestamp
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XTimestamp2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XTimestamp3
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XTimestamp4
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BeatriceV2ModelImportParamVoice_changer_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RVC")]
        RVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Beatrice_v2")]
        Beatrice_v2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RESERVED_FOR_SAMPLE")]
        RESERVED_FOR_SAMPLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BROKEN")]
        BROKEN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slot_index
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Icon_file
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Zip_file
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmbedderInfoEmbedder_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"hubert_base_l9fp")]
        Hubert_base_l9fp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hubert_base_l12")]
        Hubert_base_l12 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"contentvec")]
        Contentvec = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"hubert_base_japanese_l9fp")]
        Hubert_base_japanese_l9fp = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hubert_base_japanese_l12")]
        Hubert_base_japanese_l12 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"whisper")]
        Whisper = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Candidate_onnx_providers
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onnx_providers
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onnx_provider_options
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dst
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dst2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PitchEstimatorInfoPitch_estimator_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"harvest")]
        Harvest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dio")]
        Dio = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"crepe_full")]
        Crepe_full = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"crepe_large")]
        Crepe_large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"crepe_medium")]
        Crepe_medium = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"crepe_small")]
        Crepe_small = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"crepe_tiny")]
        Crepe_tiny = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"rmvpe")]
        Rmvpe = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"rmvpe_onnx")]
        Rmvpe_onnx = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"fcpe")]
        Fcpe = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Model_file
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Candidate_onnx_providers2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onnx_providers2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onnx_provider_options2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RVCInferencerInfoInferencer_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pyTorchRVC")]
        PyTorchRVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pyTorchRVCNono")]
        PyTorchRVCNono = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"pyTorchRVCv2")]
        PyTorchRVCv2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"pyTorchRVCv2Nono")]
        PyTorchRVCv2Nono = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pyTorchDDPN")]
        PyTorchDDPN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"pyTorchDDPNNono")]
        PyTorchDDPNNono = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"onnxRVC")]
        OnnxRVC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"onnxRVCNono")]
        OnnxRVCNono = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Candidate_onnx_providers3
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onnx_providers3
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onnx_provider_options3
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RVCModelImportParamVoice_changer_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RVC")]
        RVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Beatrice_v2")]
        Beatrice_v2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RESERVED_FOR_SAMPLE")]
        RESERVED_FOR_SAMPLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BROKEN")]
        BROKEN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slot_index2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Icon_file2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Index_file
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loc
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pitch_estimator_type
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pipeline_info
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Voice_changer_type
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OkadaVoiceChangerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public OkadaVoiceChangerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OkadaVoiceChangerException<TResult> : OkadaVoiceChangerException
    {
        public TResult Result { get; private set; }

        public OkadaVoiceChangerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625